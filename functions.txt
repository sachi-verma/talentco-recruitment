 //USED IN DAILY SOURCING CONTROLLER
 exports.getFilteredUpdate = async (req, res) => {
     try {
         // get all source data
         const getdata = await Report.findAll();
         // below array is for store all source data calculations and show by date
         let alldata = [];
         //below array is for store all sourced data separate by date
         let filterArr = [];
         //blelow array for store all dates
         const temp = [];
         // get all dates
         getdata?.forEach((val) => {
             temp.push(val.date);
         })
         //get unique dates
         const unique = [...new Set(temp)];
         //length of total unique dates
         let totalUnique = unique?.length;
         // create empty array for each unique date
         let n = 0;
         while (n < totalUnique) {
             filterArr?.push([]);
             n++;
         }
         //add data into array by date
         n = 0;
         while (n < totalUnique) {
             getdata?.forEach((val) => {
                 if (val.date === unique[n]) {
                     filterArr[n].push(val);
                 }
             })
             n++;
         }
         n = 0;
         let totalcv;
         let totalRelevant;
         let pending;
         let sent;
         while (n < totalUnique) {
             // total cv
             totalcv = filterArr[n]?.length;
             //total relevant
             totalRelevant = filterArr[n]?.filter((val) => {
                 if (val?.relevant === "Yes") {
                     return val;
                 }
             });
             totalRelevant = totalRelevant?.length;
             // total pending
             pending = filterArr[n]?.filter((val) => {
                 if (val?.candidateStatus === "confirmation pending") {
                     return val;
                 }
             });
             pending = pending?.length;
             // total sent cv's
             sent = filterArr[n]?.filter((val) => {
                 if (val?.candidateStatus === "sent to client") {
                     return val;
                 }
             });
             sent = sent?.length;
             // add calculations to unique date
             if (alldata?.length >= 1) {
                 alldata = [...alldata,
                 {
                     id: alldata?.length + 1,
                     date: unique[n],
                     totalCv: totalcv,
                     totalRelevant: totalRelevant,
                     pending: pending,
                     sent: sent
                 },
                 ]
             }
             else {
                 alldata = [
                     {
                         id: 1,
                         date: unique[n],
                         totalCv: totalcv,
                         totalRelevant: totalRelevant,
                         pending: pending,
                         sent: sent
                     },
                 ]
             }
             n++;
         }
         res.status(200).json({ data: { alldata: alldata, filterArr: filterArr} });
     } catch (error) {
         res.status(400).send(error);
     }
 };


// SAME AS ABOVE BUT IN FUNCTION FORM
async function getFilteredUpdate() {
    try {
        const allReports = await Report.findAll();
        let alldata = [];
        let filterArr = [];
        let dates = [];
        allReports.forEach((report) => {
            dates.push(report.sourcing_date);
        });
        const uniqueDates = [...new Set(dates)];
        uniqueDates.forEach((update_date) => {
            filterArr.push(allReports.filter((report) => report.sourcing_date === update_date));
        });
        filterArr.forEach((filteredReports) => {
            let total_cv_sourced = filteredReports.length;
            let total_cv_relevant = filteredReports.filter((report) => report.relevant === "Yes").length;
            let total_confirmation_pending = filteredReports.filter((report) => report.candidate_status === "confirmation pending").length;
            let total_sent_to_client = filteredReports.filter((report) => report.candidate_status === "sent to client").length;
            alldata.push({
                update_date: filteredReports[0].sourcing_date,
                total_cv_sourced,
                total_cv_relevant,
                total_confirmation_pending,
                total_sent_to_client
            });
        });
        // Save each object in the alldata array to the database
        await Promise.all(alldata.map(async (data) => {
            await Update.create(data);
        }));
        return alldata;
     
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({
            error: 'Internal Server Error'
        });
    }
};